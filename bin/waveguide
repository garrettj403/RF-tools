#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Waveguide tool."""

import argparse

import matplotlib.pyplot as plt
import numpy as np
import scipy.constants as sc

from rftools import RectangularWaveguide as Waveguide
from rftools.util import pvalf

np.seterr(invalid='ignore')

# Grab arguments
parser = argparse.ArgumentParser()
parser.add_argument("type", type=str, nargs='+', help="Waveguide size, e.g., WR4.3")
parser.add_argument('-f', '--freq', help="Frequency to analyze (in GHz)", default=None)
parser.add_argument('-pz', '--plotz', action="store_true", help="Plot impedance")
parser.add_argument('-pw', '--plotw', action="store_true", help="Plot wavelength")
args = parser.parse_args()

# Get dimensions
assert args.type[0][:2] == "WR", "Waveguide size must start with WR"
a = float(args.type[0][2:]) * 10 * sc.mil

# Build waveguide
print("")
wg = Waveguide(a, a/2, comment=args.type[0])

# Cutoff frequency
pvalf('cutoff TE10   ', wg.cutoff(1, 0) / sc.giga, 'GHz')
pvalf('cutoff TE20   ', wg.cutoff(2, 0) / sc.giga, 'GHz')
pvalf('cutoff TE01   ', wg.cutoff(0, 1) / sc.giga, 'GHz')
pvalf('cutoff TE/TM11', wg.cutoff(1, 1) / sc.giga, 'GHz')

# Analyze frequency
freq = float(args.freq) * sc.giga
if freq is None:
    freq = wg.cutoff(1, 0) * 1.5
print(("\n\t-> at {0} GHz".format(round(freq / sc.giga, 1))))
pvalf('wavelength', wg.wavelength(freq, 1, 0) / sc.milli, 'mm')
pvalf('impedance', wg.impedance(freq, 1, 0), 'ohms')
print("")

# Plot characteristic impedance
if args.plotz:
    f_cutoff = wg.cutoff(1, 0)

    f = np.linspace(0.8 * f_cutoff, 2.1 * f_cutoff, 300)

    plt.figure()
    plt.plot(f / sc.giga, wg.impedance(f, 1, 0))
    plt.xlabel(r'Frequency (GHz)')
    plt.ylabel(r'Characteristic impedance ($\Omega$)')
    plt.title('Impedance of a {} waveguide'.format(args.type[0]))

# Plot wavelength
if args.plotw:
    f_cutoff = wg.cutoff(1, 0)

    f = np.linspace(0.8 * f_cutoff, 2.1 * f_cutoff, 300)

    plt.figure()
    plt.plot(f / sc.giga, wg.wavelength(f, 1, 0) * 1e3)
    plt.xlabel(r'Frequency (GHz)')
    plt.ylabel(r'Wavelength (mm)')
    plt.title('Wavelength inside a {} waveguide'.format(args.type[0]))

if args.plotz or args.plotw:
    plt.show()
